// Rust 程序入口,无返回值
fn main() {
    // 使用let声明变量, 进行绑定, a是不可变的
    // 没有指定a的类型,编译器会默认根据a的值为a推断类型: i32 有符合32位整数 
    // 语句的末尾必须以分号截尾;
    let a = 10;
    // 主动指定b的类型为i32 
    let b:i32 = 20;
    // 1.可以在数值中带上类型, 30i32表示数值是30，类型是i32 
    // 2.c是可变的,mut 是Mutable的缩写
    let mut c = 30i32;
    c += 10;
    // 数值_类型
    let d = 30_i32;
    let e = add(add(a,b),add(c,d));
    // {} 占位符
    println!("(a+b)+(c+d)={}",e);
}

// 定义一个函数, 输入两个i32 类型 
// 不能写成 (i,j:i32) 必须写成(i:i32,j:i32)
// 也不能写成 fn add((i,j):(i32,i32))->i32{
fn add(i:i32 , j:i32)->i32{
    // 返回相加值可省略return 
   return i+j
}
